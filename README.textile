h1. Important update

!https://api.travis-ci.org/bigcommerce/powerdns-on-rails.png!

*The current master branch of the PowerDNS on Rails project is deprecated. I'm busy finishing off the "features/rails3":https://github.com/kennethkalmer/powerdns-on-rails/tree/feature%2Frails3 branch which will be merged into master shortly and will be the new base of future development. This project will remain actively maintained once again.*

Thanks for your support and understanding.

h2. PowerDNS on Rails

PowerDNS on Rails is a Ruby on Rails application made to manage "PowerDNS":http://www.powerdns.com installations using the generic MySQL/PostgreSQL backends.

More information:

* The README (this file)
* "Home page":http://kennethkalmer.github.com/powerdns-on-rails
* "Bug tracker":http://kennethkalmer.lighthouseapp.com/projects/11831-powerdns-on-rails

h2. Quick Installation

# $ git clone git://github.com/kennethkalmer/powerdns-on-rails.git
# $ cd powerdns-on-rails
# Review config/database.yml and modify as needed
# $ rake db:migrate
# $ rake db:seed
# $ ruby script/server
# Point your browser to http://localhost:3000
# Login with 'admin' and 'secret'

*Note on versions:* PowerDNS on Rails is version-less, and the master branch will always have stable useable code.

h2. Features (current and planned)

* RESTful architecture to support rich UI and API access
* Multi-user support (admins, owners, API clients)
* CLI clients to show integration capabilities
* Conversion and import tools
* Zone/Record Templates
* DNS Insight
* Full audit record of all changes
* Macros for easy bulk updating of domains
* Support for PowerDNS MASTER, NATIVE & SLAVE record types

h2. Overview

PowerDNS is a reliable alternative to BIND and sports a flexible, feature rich design and support for various backends, including MySQL and PostgreSQL. This simplifies the management of thousands of zones, and provides added redundancy (by way of database replication) and opens the doors for web frontends that ease this even more.

PowerDNS on Rails is built based on our experience of managing thousands of DNS records through various (often crude) techniques, that included building zone files from databases via cron, and implementing PowerDNS for its database backends.

We first built BIND DLZ on Rails that allowed us to migrate back to BIND using a MySQL 5.0 backend, but after several failed production runs we decided to split the project off to use our existing PowerDNS infrastructure.  Using Rails 2 for a interface just makes sense because we can build a rich interface and an REST API in a single go. We have a lot of integration needs, and this was our main driver.

h2. PowerDNS Information

The PowerDNS project can be found at http://www.powerdns.com. The documentation is in-depth on that site, I won't repeat anything here unless its related to this project specifically.

It is however worth noting that this interface excepts the "Generic MySQL and PgSQL backend" to be used, as per http://doc.powerdns.com/generic-mypgsql-backends.html

h2. Database Structure

PowerDNS does not allow you to alter the database schema at all, and you're forced to use at least one set database table. It can however handle additions to the table without problems.

We also add several additional tables to accomodate users, templates, macros and other features.

h2. Migration to PowerDNS

PowerDNS does provide a suite of migration tools, and they're all covered in the official documentation.

h2. Testing

PowerDNS on Rails is built using extensive RSpec suites, often termed "Behaviour Driven Development". It is critical for a core service like DNS to be reliable and that all changes are correct and won't impact services offered to clients.

Apart from the extensive programmatic tests, we'll be implementing tests that actually seed a DNS database and use BIND's dig utility to query a configured PowerDNS installation.

